BuilderError	graph.html#BuilderError	graph: BuilderError	
tConst	graph.html#tConst	OpType.tConst	
tLiteral	graph.html#tLiteral	OpType.tLiteral	
tParam	graph.html#tParam	OpType.tParam	
tError	graph.html#tError	OpType.tError	
tIota	graph.html#tIota	OpType.tIota	
tNot	graph.html#tNot	OpType.tNot	
tNeg	graph.html#tNeg	OpType.tNeg	
tAbs	graph.html#tAbs	OpType.tAbs	
tExp	graph.html#tExp	OpType.tExp	
tFloor	graph.html#tFloor	OpType.tFloor	
tCeil	graph.html#tCeil	OpType.tCeil	
tRound	graph.html#tRound	OpType.tRound	
tLog	graph.html#tLog	OpType.tLog	
tLog1p	graph.html#tLog1p	OpType.tLog1p	
tSigmoid	graph.html#tSigmoid	OpType.tSigmoid	
tRelu	graph.html#tRelu	OpType.tRelu	
tSign	graph.html#tSign	OpType.tSign	
tCos	graph.html#tCos	OpType.tCos	
tSin	graph.html#tSin	OpType.tSin	
tTanh	graph.html#tTanh	OpType.tTanh	
tSqrt	graph.html#tSqrt	OpType.tSqrt	
tRsqrt	graph.html#tRsqrt	OpType.tRsqrt	
tIsFinite	graph.html#tIsFinite	OpType.tIsFinite	
tCopy	graph.html#tCopy	OpType.tCopy	
tZerosLike	graph.html#tZerosLike	OpType.tZerosLike	
tTupleElement	graph.html#tTupleElement	OpType.tTupleElement	
tReshape	graph.html#tReshape	OpType.tReshape	
tBroadcast	graph.html#tBroadcast	OpType.tBroadcast	
tBroadcastInDim	graph.html#tBroadcastInDim	OpType.tBroadcastInDim	
tCollapse	graph.html#tCollapse	OpType.tCollapse	
tTranspose	graph.html#tTranspose	OpType.tTranspose	
tNarrow	graph.html#tNarrow	OpType.tNarrow	
tConvert	graph.html#tConvert	OpType.tConvert	
tReverse	graph.html#tReverse	OpType.tReverse	
tMaxPool	graph.html#tMaxPool	OpType.tMaxPool	
tReduceSum	graph.html#tReduceSum	OpType.tReduceSum	
tReduceMin	graph.html#tReduceMin	OpType.tReduceMin	
tReduceMax	graph.html#tReduceMax	OpType.tReduceMax	
tArgmin	graph.html#tArgmin	OpType.tArgmin	
tArgmax	graph.html#tArgmax	OpType.tArgmax	
tAdd	graph.html#tAdd	OpType.tAdd	
tSub	graph.html#tSub	OpType.tSub	
tMul	graph.html#tMul	OpType.tMul	
tDiv	graph.html#tDiv	OpType.tDiv	
tRem	graph.html#tRem	OpType.tRem	
tMax	graph.html#tMax	OpType.tMax	
tMin	graph.html#tMin	OpType.tMin	
tPow	graph.html#tPow	OpType.tPow	
tDot	graph.html#tDot	OpType.tDot	
tAnd	graph.html#tAnd	OpType.tAnd	
tOr	graph.html#tOr	OpType.tOr	
tEq	graph.html#tEq	OpType.tEq	
tNe	graph.html#tNe	OpType.tNe	
tGe	graph.html#tGe	OpType.tGe	
tGt	graph.html#tGt	OpType.tGt	
tLe	graph.html#tLe	OpType.tLe	
tLt	graph.html#tLt	OpType.tLt	
tRngUniform	graph.html#tRngUniform	OpType.tRngUniform	
tRngNormal	graph.html#tRngNormal	OpType.tRngNormal	
tReduce	graph.html#tReduce	OpType.tReduce	
tGather	graph.html#tGather	OpType.tGather	
tConv	graph.html#tConv	OpType.tConv	
tReduceWindow	graph.html#tReduceWindow	OpType.tReduceWindow	
tSelectAndScatter	graph.html#tSelectAndScatter	OpType.tSelectAndScatter	
tSelect	graph.html#tSelect	OpType.tSelect	
tClamp	graph.html#tClamp	OpType.tClamp	
tTuple	graph.html#tTuple	OpType.tTuple	
tConcat	graph.html#tConcat	OpType.tConcat	
tScatter	graph.html#tScatter	OpType.tScatter	
OpType	graph.html#OpType	graph: OpType	
Builder	graph.html#Builder	graph: Builder	
Node	graph.html#Node	graph: Node	
Computation	graph.html#Computation	graph: Computation	
raiseError	graph.html#raiseError,string,Node	graph: raiseError(message: string; node: Node = nil)	
dtype	graph.html#dtype,Node	graph: dtype(n: Node): DataType	
rank	graph.html#rank,Node	graph: rank(n: Node): int	
dims	graph.html#dims,Node	graph: dims(n: Node): seq[int]	
len	graph.html#len,Node	graph: len(n: Node): int	
`$`	graph.html#$,Node	graph: `$`(n: Node): string	
repr	graph.html#repr,Node	graph: repr(n: Node): string	
toString	graph.html#toString,Node	graph: toString(n: Node): string	
newBuilder	graph.html#newBuilder,string	graph: newBuilder(name: string): Builder	
build	graph.html#build,Builder,Node	graph: build(b: Builder; root: Node): Computation	
last	graph.html#last,Computation	graph: last(comp: Computation): Node	
rawPtr	graph.html#rawPtr,Computation	graph: rawPtr(comp: Computation): xla_computation	
name	graph.html#name,Computation	graph: name(comp: Computation): string	
paramNames	graph.html#paramNames,Computation	graph: paramNames(comp: Computation): seq[string]	
`$`	graph.html#$,Computation	graph: `$`(comp: Computation): string	
parameter	graph.html#parameter,Builder,DataType,openArray[int],string	graph: parameter(b: Builder; dtype: DataType; dims: openArray[int] = []; name = &quot;&quot;): Node	
makeTuple	graph.html#makeTuple,Builder,varargs[Node]	graph: makeTuple(b: Builder; args: varargs[Node]): Node	
iota	graph.html#iota,Builder,DataType,int	graph: iota(b: Builder; dtype: DataType; length: int): Node	
iota	graph.html#iota,Builder,DataType,openArray[int],int	graph: iota(b: Builder; dtype: DataType; dims: openArray[int]; axis: int): Node	
errorNode	graph.html#errorNode,Builder,string	graph: errorNode(b: Builder; message: string): Node	
constant	graph.html#constant,Builder,Literal	graph: constant(b: Builder; lit: Literal): Node	
constant	graph.html#constant,Builder,Tensor[T: ElemType]	graph: constant[T: ElemType](b: Builder; t: Tensor[T]): Node	
constant	graph.html#constant,Builder,int32	graph: constant(b: Builder; value: int32): Node	
constant	graph.html#constant,Builder,	graph: constant(b: Builder; value: openArray[int32]): Node	
constant	graph.html#constant,Builder,int64	graph: constant(b: Builder; value: int64): Node	
constant	graph.html#constant,Builder,_2	graph: constant(b: Builder; value: openArray[int64]): Node	
constant	graph.html#constant,Builder,float32	graph: constant(b: Builder; value: float32): Node	
constant	graph.html#constant,Builder,_3	graph: constant(b: Builder; value: openArray[float32]): Node	
constant	graph.html#constant,Builder,float64	graph: constant(b: Builder; value: float64): Node	
constant	graph.html#constant,Builder,_4	graph: constant(b: Builder; value: openArray[float64]): Node	
constant	graph.html#constant,Builder,int	graph: constant(b: Builder; value: int): Node	
constant	graph.html#constant,Builder,openArray[int]	graph: constant(b: Builder; value: openArray[int]): Node	
constant	graph.html#constant,Builder,T,DataType	graph: constant[T: float | int](b: Builder; value: T; dtype: DataType): Node	
`^`	graph.html#^.t,Builder,untyped	graph: `^`(b: Builder; value: untyped): Node	
zero	graph.html#zero,Builder,enum	graph: zero(b: Builder; dtype = F32; dims: openArray[int] = []): Node	
one	graph.html#one,Builder,enum	graph: one(b: Builder; dtype = F32; dims: openArray[int] = []): Node	
minValue	graph.html#minValue,Builder,enum	graph: minValue(b: Builder; dtype = F32; dims: openArray[int] = []): Node	
maxValue	graph.html#maxValue,Builder,enum	graph: maxValue(b: Builder; dtype = F32; dims: openArray[int] = []): Node	
`+`	graph.html#+,Node,Node	graph: `+`(a, b: Node): Node	
`-`	graph.html#-,Node,Node	graph: `-`(a, b: Node): Node	
`*`	graph.html#*,Node,Node	graph: `*`(a, b: Node): Node	
`/`	graph.html#/,Node,Node	graph: `/`(a, b: Node): Node	
rem	graph.html#rem,Node,Node	graph: rem(a, b: Node): Node	
max	graph.html#max,Node,Node	graph: max(a, b: Node): Node	
min	graph.html#min,Node,Node	graph: min(a, b: Node): Node	
pow	graph.html#pow,Node,Node	graph: pow(a, b: Node): Node	
dot	graph.html#dot,Node,Node	graph: dot(a, b: Node): Node	
logicalAnd	graph.html#logicalAnd,Node,Node	graph: logicalAnd(a, b: Node): Node	
logicalOr	graph.html#logicalOr,Node,Node	graph: logicalOr(a, b: Node): Node	
`==`	graph.html#==,Node,Node	graph: `==`(a, b: Node): Node	
`!=`	graph.html#!=,Node,Node	graph: `!=`(a, b: Node): Node	
`&gt;=`	graph.html#>=,Node,Node	graph: `&gt;=`(a, b: Node): Node	
`&gt;`	graph.html#>,Node,Node	graph: `&gt;`(a, b: Node): Node	
`&lt;=`	graph.html#<=,Node,Node	graph: `&lt;=`(a, b: Node): Node	
`&lt;`	graph.html#<,Node,Node	graph: `&lt;`(a, b: Node): Node	
`!`	graph.html#!,Node	graph: `!`(a: Node): Node	
`-`	graph.html#-,Node	graph: `-`(a: Node): Node	
abs	graph.html#abs,Node	graph: abs(a: Node): Node	
exp	graph.html#exp,Node	graph: exp(a: Node): Node	
floor	graph.html#floor,Node	graph: floor(a: Node): Node	
ceil	graph.html#ceil,Node	graph: ceil(a: Node): Node	
round	graph.html#round,Node	graph: round(a: Node): Node	
log	graph.html#log,Node	graph: log(a: Node): Node	
log1p	graph.html#log1p,Node	graph: log1p(a: Node): Node	
sigmoid	graph.html#sigmoid,Node	graph: sigmoid(a: Node): Node	
sign	graph.html#sign,Node	graph: sign(a: Node): Node	
cos	graph.html#cos,Node	graph: cos(a: Node): Node	
sin	graph.html#sin,Node	graph: sin(a: Node): Node	
tanh	graph.html#tanh,Node	graph: tanh(a: Node): Node	
sqrt	graph.html#sqrt,Node	graph: sqrt(a: Node): Node	
rsqrt	graph.html#rsqrt,Node	graph: rsqrt(a: Node): Node	
isFinite	graph.html#isFinite,Node	graph: isFinite(a: Node): Node	
copy	graph.html#copy,Node	graph: copy(a: Node): Node	
zerosLike	graph.html#zerosLike,Node	graph: zerosLike(a: Node): Node	
`[]`	graph.html#[],Node,int	graph: `[]`(a: Node; index: int): Node	
convert	graph.html#convert,Node,DataType	graph: convert(a: Node; dtype: DataType): Node	
reshape	graph.html#reshape,Node,varargs[int]	graph: reshape(a: Node; dims: varargs[int]): Node	
flatten	graph.html#flatten,Node,int,int	graph: flatten(a: Node; startDim = 0; endDim = -1): Node	
reverse	graph.html#reverse,Node,varargs[int]	graph: reverse(a: Node; axes: varargs[int]): Node	
broadcast	graph.html#broadcast,Node,openArray[int]	graph: broadcast(a: Node; dims: openArray[int]): Node	
broadcastInDim	graph.html#broadcastInDim,Node,openArray[int],openArray[int]	graph: broadcastInDim(a: Node; outSize, bcastDims: openArray[int]): Node	
collapse	graph.html#collapse,Node,openArray[int]	graph: collapse(a: Node; dims: openArray[int]): Node	
transpose	graph.html#transpose,Node,varargs[int]	graph: transpose(a: Node; axes: varargs[int]): Node	
narrow	graph.html#narrow,Node,int,int,int,int	graph: narrow(a: Node; dim, start, stop: int; stride = 1): Node	
relu	graph.html#relu,Node	graph: relu(a: Node): Node	
select	graph.html#select,Node,Node,Node	graph: select(a, onTrue, onFalse: Node): Node	
clamp	graph.html#clamp,Node,Node,Node	graph: clamp(a, min, max: Node): Node	
rngUniform	graph.html#rngUniform,Node,Node,openArray[int]	graph: rngUniform(min, max: Node; dims: openArray[int]): Node	
rngNormal	graph.html#rngNormal,Node,Node,openArray[int]	graph: rngNormal(mean, stddev: Node; dims: openArray[int]): Node	
concat	graph.html#concat,Node,openArray[Node],int	graph: concat(a: Node; nodes: openArray[Node]; axis: int): Node	
convolution	graph.html#convolution,Node,Node,openArray[int],openArray[int],openArray[int],openArray[int],openArray[Padding],openArray[int],openArray[int],int,int	graph: convolution(a, kernel: Node; inputDims, outputDims, kernelDims: openArray[int];\n            strides: openArray[int] = []; padding: openArray[Padding] = [];\n            dilation, inputDilation: openArray[int] = [];\n            groups, batchGroups = 1): Node	
getDims	graph.html#getDims,int,bool	graph: getDims(ndims: int; channelsFirst: bool): seq[int]	
conv1d	graph.html#conv1d,Node,Node,int,int,int	graph: conv1d(a, kernel: Node; strides = 1; padding = pad(0); dilation = 1; groups = 1;\n       channelsFirst = false): Node	
conv2d	graph.html#conv2d,Node,Node,Opt2d,Pad2d,Opt2d,int	graph: conv2d(a, kernel: Node; strides: Opt2d = 1; padding: Pad2d = pad(0);\n       dilation: Opt2d = 1; groups = 1; channelsFirst = false): Node	
conv3d	graph.html#conv3d,Node,Node,Opt3d,Pad3d,Opt3d,int	graph: conv3d(a, kernel: Node; strides: Opt3d = 1; padding: Pad3d = pad(0);\n       dilation: Opt3d = 1; groups = 1; channelsFirst = false): Node	
gather	graph.html#gather,Node,Node	graph: gather(a, indices: Node): Node	
scatter	graph.html#scatter,Node,Node,Node,Computation	graph: scatter(a, indices, b: Node; comp: Computation): Node	
addAt	graph.html#addAt,Node,Node,Node	graph: addAt(a, indices, b: Node): Node	
reduce	graph.html#reduce,Node,Node,Computation,openArray[int]	graph: reduce(a, initValue: Node; comp: Computation; dims: openArray[int] = [];\n       nodeType = tReduce; keepDims = false): Node	
sum	graph.html#sum,Node,openArray[int]	graph: sum(a: Node; dims: openArray[int] = []; keepDims = false): Node	
sum	graph.html#sum,Node,int	graph: sum(a: Node; axis: int; keepDims = false): Node	
mean	graph.html#mean,Node,openArray[int]	graph: mean(a: Node; dims: openArray[int] = []; keepDims = false): Node	
mean	graph.html#mean,Node,int	graph: mean(a: Node; axis: int; keepDims = false): Node	
min	graph.html#min,Node,openArray[int]	graph: min(a: Node; dims: openArray[int] = []; keepDims = false): Node	
min	graph.html#min,Node,int	graph: min(a: Node; axis: int; keepDims = false): Node	
max	graph.html#max,Node,openArray[int]	graph: max(a: Node; dims: openArray[int] = []; keepDims = false): Node	
max	graph.html#max,Node,int	graph: max(a: Node; axis: int; keepDims = false): Node	
argMax	graph.html#argMax,Node,int,bool,enum	graph: argMax(a: Node; axis: int; keepDims = false; ixType = I64): Node	
argMin	graph.html#argMin,Node,int,bool,enum	graph: argMin(a: Node; axis: int; keepDims = false; ixType = I64): Node	
reduceWindow	graph.html#reduceWindow,Node,Node,Computation,openArray[int],openArray[int],openArray[Padding]	graph: reduceWindow(a, initValue: Node; comp: Computation;\n             windowDims, strides: openArray[int];\n             padding: openArray[Padding] = []; nodeType = tReduceWindow): Node	
maxPool1d	graph.html#maxPool1d,Node,int,int	graph: maxPool1d(a: Node; kernelSize: int; strides = 0; padding = pad(0);\n          channelsFirst = false): Node	
maxPool2d	graph.html#maxPool2d,Node,Opt2d,Opt2d,Pad2d	graph: maxPool2d(a: Node; kernelSize: Opt2d; strides: Opt2d = 0;\n          padding: Pad2d = pad(0); channelsFirst = false): Node	
maxPool3d	graph.html#maxPool3d,Node,Opt3d,Opt3d,Pad3d	graph: maxPool3d(a: Node; kernelSize: Opt3d; strides: Opt3d = 0;\n          padding: Pad3d = pad(0); channelsFirst = false): Node	
selectAndScatter	graph.html#selectAndScatter,Node,Node,openArray[int],openArray[int],openArray[Padding]	graph: selectAndScatter(a, source: Node; windowDims, strides: openArray[int];\n                 padding: openArray[Padding] = []): Node	
gradient	graph.html#gradient,Builder,Node,openArray[string]	graph: gradient(b: Builder; output: Node; inputs: openArray[string]): seq[Node]	
