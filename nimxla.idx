Info	nimxla.html#Info	LogLevel.Info	
Warning	nimxla.html#Warning	LogLevel.Warning	
Error	nimxla.html#Error	LogLevel.Error	
Fatal	nimxla.html#Fatal	LogLevel.Fatal	
LogLevel	nimxla.html#LogLevel	nimxla: LogLevel	
Buffer	nimxla.html#Buffer	nimxla: Buffer	
Params	nimxla.html#Params	nimxla: Params	
Executable	nimxla.html#Executable	nimxla: Executable	
Client	nimxla.html#Client	nimxla: Client	
setLogLevel	nimxla.html#setLogLevel,LogLevel	nimxla: setLogLevel(level: LogLevel)	
deviceCount	nimxla.html#deviceCount,Client	nimxla: deviceCount(client: Client): int	
platformName	nimxla.html#platformName,Client	nimxla: platformName(client: Client): string	
platformVersion	nimxla.html#platformVersion,Client	nimxla: platformVersion(client: Client): string	
`$`	nimxla.html#$,Client	nimxla: `$`(client: Client): string	
newCPUClient	nimxla.html#newCPUClient	nimxla: newCPUClient(logLevel = Warning): Client	
newGPUClient	nimxla.html#newGPUClient,float	nimxla: newGPUClient(memoryFraction = 1.0; preallocate = false; logLevel = Warning): Client	
newTPUClient	nimxla.html#newTPUClient,int	nimxla: newTPUClient(maxInflightComputations: int; logLevel = Warning): Client	
newClient	nimxla.html#newClient	nimxla: newClient(useGPU = true): Client	
newBuffer	nimxla.html#newBuffer,Client,Literal,int	nimxla: newBuffer(client: Client; lit: Literal; device = 0): Buffer	
newBuffer	nimxla.html#newBuffer,Client,DataType,openArray[int]	nimxla: newBuffer(client: Client; dtype: DataType; dims: openArray[int]): Buffer	
newBuffer	nimxla.html#newBuffer,Client,Tensor[T: ElemType],int	nimxla: newBuffer[T: ElemType](client: Client; t: Tensor[T]; device = 0): Buffer	
shape	nimxla.html#shape,Buffer	nimxla: shape(buf: Buffer): Shape	
toLiteral	nimxla.html#toLiteral,Buffer	nimxla: toLiteral(buf: Buffer): Literal	
toTensor	nimxla.html#toTensor,Buffer	nimxla: toTensor[T: ElemType](buf: Buffer): Tensor[T]	
i32	nimxla.html#i32,Buffer	nimxla: i32(buf: Buffer): Tensor[int32]	
i64	nimxla.html#i64,Buffer	nimxla: i64(buf: Buffer): Tensor[int64]	
f32	nimxla.html#f32,Buffer	nimxla: f32(buf: Buffer): Tensor[float32]	
f64	nimxla.html#f64,Buffer	nimxla: f64(buf: Buffer): Tensor[float64]	
boolean	nimxla.html#boolean,Buffer	nimxla: boolean(buf: Buffer): Tensor[bool]	
`$`	nimxla.html#$,Buffer	nimxla: `$`(buf: Buffer): string	
noutputs	nimxla.html#noutputs,Executable	nimxla: noutputs(exec: Executable): int	
compile	nimxla.html#compile,Client,Computation,openArray[string]	nimxla: compile(client: Client; comp: Computation; outputs: openArray[string] = []): Executable	
`$`	nimxla.html#$,Executable	nimxla: `$`(exec: Executable): string	
runAndUnpack	nimxla.html#runAndUnpack,Executable,openArray[T]	nimxla: runAndUnpack[T: Buffer | Literal](exec: Executable; args: openArray[T];\n                                  checkShape = true): seq[Buffer]	
runAndUnpack	nimxla.html#runAndUnpack,Executable	nimxla: runAndUnpack(exec: Executable; checkShape = true): seq[Buffer]	
run	nimxla.html#run,Executable,openArray[T]	nimxla: run[T: Buffer | Literal](exec: Executable; args: openArray[T]; checkShape = true): Buffer	
run	nimxla.html#run,Executable	nimxla: run(exec: Executable; checkShape = true): Buffer	
initParams	nimxla.html#initParams,openArray[]	nimxla: initParams(pairs: openArray[(string, Buffer)]): Params	
runWith	nimxla.html#runWith,Executable,Params	nimxla: runWith(exec: Executable; params: var Params; checkShape = true)	
toLiterals	nimxla.html#toLiterals,openArray[Buffer]	nimxla: toLiterals(buffers: openArray[Buffer]): seq[Literal]	
tuple2	nimxla.html#tuple2,openArray[Buffer]	nimxla: tuple2(res: openArray[Buffer]): (Buffer, Buffer)	
tuple3	nimxla.html#tuple3,openArray[Buffer]	nimxla: tuple3(res: openArray[Buffer]): (Buffer, Buffer, Buffer)	
tuple4	nimxla.html#tuple4,openArray[Buffer]	nimxla: tuple4(res: openArray[Buffer]): (Buffer, Buffer, Buffer, Buffer)	
tuple5	nimxla.html#tuple5,openArray[Buffer]	nimxla: tuple5(res: openArray[Buffer]): (Buffer, Buffer, Buffer, Buffer, Buffer)	
