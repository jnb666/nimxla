Trainer	train.html#Trainer	train: Trainer	
trainFunc	train.html#trainFunc,Client,Module,DataType,seq[int],proc(Node,Node)	train: trainFunc(c: Client; model: Module; dtype: DataType; shape: seq[int];\n          lossFn: proc (yp, y: Node): Node): Executable	
testFunc	train.html#testFunc,Client,Module,DataType,seq[int]	train: testFunc(c: Client; model: Module; dtype: DataType; shape: seq[int]): Executable	
accuracyFunc	train.html#accuracyFunc,Client,int,int	train: accuracyFunc(c: Client; batch, nout: int; outType = F32; labelType = I32): Executable	
trainEpoch	train.html#trainEpoch,Trainer,DataLoader	train: trainEpoch[T: ElemType](t: var Trainer; loader: var DataLoader): (float, float,\n    bool)	
getAccuracy	train.html#getAccuracy,Trainer,DataLoader	train: getAccuracy[T: ElemType](t: var Trainer; loader: var DataLoader): (float, bool)	
saveCheckpoint	train.html#saveCheckpoint,Trainer,string	train: saveCheckpoint(t: Trainer; basename: string)	
loadCheckpoint	train.html#loadCheckpoint,Trainer,string	train: loadCheckpoint(t: var Trainer; filename: string)	
statsPlots	train.html#statsPlots,Trainer,seq[string]	train: statsPlots(t: Trainer; classes: seq[string]): JsonNode	
getLayout	train.html#getLayout,int	train: getLayout(epochs: int): JsonNode	
trainNetwork	train.html#trainNetwork,Trainer,DataLoader,DataLoader,int,string,int	train: trainNetwork[T: ElemType](t: var Trainer; train, test: var DataLoader;\n                          epochs: int; plot = false; checkpoint = &quot;&quot;;\n                          saveEvery = 10)	
