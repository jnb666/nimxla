nimTitle	literal	literal.html	module nimxla/literal		0
nim	Literal	literal.html#Literal	type Literal		12
nim	newLiteral	literal.html#newLiteral,DataType,openArray[int]	proc newLiteral(dtype: DataType; dims: openArray[int]): Literal		25
nim	rawPtr	literal.html#rawPtr,Literal	proc rawPtr(lit: Literal): literal_t		32
nim	addrOf	literal.html#addrOf,Literal	proc addrOf(lit: Literal): ptr literal_t		34
nim	shape	literal.html#shape,Literal	proc shape(lit: Literal): Shape		36
nim	len	literal.html#len,Literal	proc len(lit: Literal): int		42
nim	dtype	literal.html#dtype,Literal	proc dtype(lit: Literal): DataType		46
nim	clone	literal.html#clone,Literal	proc clone(lit: Literal): Literal		50
nim	reshape	literal.html#reshape,Literal,varargs[int]	proc reshape(lit: Literal; dims: varargs[int]): Literal		56
nim	convert	literal.html#convert,Literal,DataType	proc convert(lit: Literal; dtype: DataType): Literal		67
nim	toLiteral	literal.html#toLiteral,Tensor[T: ElemType]	proc toLiteral[T: ElemType](t: Tensor[T]): Literal		77
nim	toTensor	literal.html#toTensor,Literal	proc toTensor[T: ElemType](lit: Literal): Tensor[T]		88
nim	i32	literal.html#i32,Literal	proc i32(lit: Literal): Tensor[int32]		98
nim	i64	literal.html#i64,Literal	proc i64(lit: Literal): Tensor[int64]		102
nim	f32	literal.html#f32,Literal	proc f32(lit: Literal): Tensor[float32]		106
nim	f64	literal.html#f64,Literal	proc f64(lit: Literal): Tensor[float64]		110
nim	decomposeTuple	literal.html#decomposeTuple,Literal	proc decomposeTuple(lit: Literal): seq[Literal]		114
nim	`$`	literal.html#$,Literal	proc `$`(lit: Literal): string		139
nim	lit	literal.html#lit,int32	proc lit(value`gensym67: int32): Literal		174
nim	lit	literal.html#lit,int64	proc lit(value`gensym69: int64): Literal		175
nim	lit	literal.html#lit,float32	proc lit(value`gensym71: float32): Literal		176
nim	lit	literal.html#lit,float64	proc lit(value`gensym73: float64): Literal		177
nimgrp	lit	literal.html#lit-procs-all	proc		168
