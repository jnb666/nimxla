Literal	literal.html#Literal	literal: Literal	
newLiteral	literal.html#newLiteral,DataType,openArray[int]	literal: newLiteral(dtype: DataType; dims: openArray[int]): Literal	
rawPtr	literal.html#rawPtr,Literal	literal: rawPtr(lit: Literal): literal_t	
addrOf	literal.html#addrOf,Literal	literal: addrOf(lit: Literal): ptr literal_t	
shape	literal.html#shape,Literal	literal: shape(lit: Literal): Shape	
len	literal.html#len,Literal	literal: len(lit: Literal): int	
dtype	literal.html#dtype,Literal	literal: dtype(lit: Literal): DataType	
clone	literal.html#clone,Literal	literal: clone(lit: Literal): Literal	
reshape	literal.html#reshape,Literal,varargs[int]	literal: reshape(lit: Literal; dims: varargs[int]): Literal	
convert	literal.html#convert,Literal,DataType	literal: convert(lit: Literal; dtype: DataType): Literal	
toLiteral	literal.html#toLiteral,Tensor[T: ElemType]	literal: toLiteral[T: ElemType](t: Tensor[T]): Literal	
toTensor	literal.html#toTensor,Literal	literal: toTensor[T: ElemType](lit: Literal): Tensor[T]	
i32	literal.html#i32,Literal	literal: i32(lit: Literal): Tensor[int32]	
i64	literal.html#i64,Literal	literal: i64(lit: Literal): Tensor[int64]	
f32	literal.html#f32,Literal	literal: f32(lit: Literal): Tensor[float32]	
f64	literal.html#f64,Literal	literal: f64(lit: Literal): Tensor[float64]	
decomposeTuple	literal.html#decomposeTuple,Literal	literal: decomposeTuple(lit: Literal): seq[Literal]	
`$`	literal.html#$,Literal	literal: `$`(lit: Literal): string	
lit	literal.html#lit,int32	literal: lit(value`gensym60: int32): Literal	
lit	literal.html#lit,int64	literal: lit(value`gensym62: int64): Literal	
lit	literal.html#lit,float32	literal: lit(value`gensym64: float32): Literal	
lit	literal.html#lit,float64	literal: lit(value`gensym66: float64): Literal	
